$primary-color: #ffffff;
$secondary-color: #0D0D0D;
$danger-color: rgb(255, 85, 85);
$success-color: rgb(190, 249, 146);
$warning-color: rgb(255, 238, 85);

$body-bg: $secondary-color;
$body-color: $primary-color;

$btn-primary-bg: $primary-color;
$btn-primary-color: $secondary-color;
$btn-secondary-bg: rgba(255, 255, 255, 0.1);
$btn-success-bg: rgba(190, 249, 146, 0.4);
$btn-danger-bg: rgba(255, 85, 85, 0.4);
$btn-warning-bg: rgba(255, 238, 85, 0.4);
$btn-secondary-color: $primary-color;

$course-color: #ba3e17;
$card-background: #121212;
$font-family: "CapitalSans";
$new-card-background : #1a1a1a;

@font-face {
    font-family: "CapitalSans";
    font-weight: 400;
    src: url("../assets/fonts/CapitalSans-Regular.woff2") format("woff2");
    src: url("../assets/fonts/CapitalSans-Regular.woff") format("woff");
}

@font-face {
    font-family: "CapitalSans";
    font-weight: 500;
    src: url("../assets/fonts/CapitalSans-Medium.woff2") format("woff2");
    src: url("../assets/fonts/CapitalSans-Medium.woff") format("woff");
}

@font-face {
    font-family: "CapitalSans";
    font-weight: 600;
    src: url("../assets/fonts/CapitalSans-Semibold.woff2") format("woff2");
    src: url("../assets/fonts/CapitalSans-Semibold.woff") format("woff");
}

@font-face {
    font-family: "CapitalSans";
    font-weight: 700;
    src: url("../assets/fonts/CapitalSans-Bold.woff2") format("woff2");
    src: url("../assets/fonts/CapitalSans-Bold.woff") format("woff");
}

/* Media Queries */
$media_queries: (
    "vw-mobile": unquote("only screen and (max-width: 499px)"),
    "vw-laptop": unquote("only screen and (min-width: 500px)"),
    // mobiles breakpoints variations
    "xs-mobile": unquote("only screen and (min-width: 200px) and (max-width: 320px)"),
   "sm-mobile": unquote("only screen and (min-width: 321px) and (max-width: 389px)"),
    "md-mobile": unquote("only screen and (min-width: 390px) and (max-width: 410px)"),
    "lg-mobile": unquote("only screen and (min-width: 411px) and (max-width: 667px)"),

    "xs-mobile-landscape": unquote("only screen and (min-width: 200px) and (max-width: 320px) and (orientation: landscape)"),
    "sm-mobile-landscape": unquote("only screen and (min-width: 321px) and (max-width: 360px) and (orientation: landscape)"),
    "md-mobile-landscape": unquote("only screen and (min-width: 361px) and (max-width: 390px) and (orientation: landscape)"),
    "lg-mobile-landscape": unquote("only screen and (min-width: 391px) and (max-width: 667px) and (orientation: landscape)"),

    "mobile": unquote("only screen and (max-width: 667px)"),
    "tablet": unquote("only screen and (min-width: 668px) and (max-width: 1023px)"),
    "laptop": unquote("only screen and (min-width: 1024px) and (max-width: 1200px)"),
    "desktop": unquote("only screen and (min-width: 1201px) and (max-width: 2000px)"),
    "tv": unquote("only screen and (min-width: 2000px)"),
    "retina2": unquote("only screen and (-webkit-min-device-pixel-ratio: 2) and (min-resolution: 192dpi)"
    ),
    "retina3": unquote("only screen and (-webkit-min-device-pixel-ratio: 3) and (min-resolution: 288dpi)"
    ),
    "landscape": unquote("screen and (orientation:landscape) "),
    "portrait": unquote("screen and (orientation:portrait) "),

    "mobile-height": unquote("only screen and (max-height: 600px)"),
    "height-laptop": unquote("only screen and (max-height: 860px) and (min-width: 1080px)"),
    "height-lg-mobile": unquote("only screen and (max-height: 700px)"),
    "height-sm-mobile": unquote("only screen and (max-height: 580px)"),
    "height-checkout": unquote("only screen and (max-height: 1000px)"),
    "height-layout": unquote("only screen and (min-height: 599px) and (max-height: 834px)"),
    "macbook-air": unquote("only screen and (min-width: 1200px) and (max-width: 1300px)"),
    "laptop-studymood": unquote("only screen and (min-width: 1024px) and (max-width: 1500px)"),
    "desktop-studymood": unquote("only screen and (min-width: 1501px) and (max-width: 2000px)"),

);
.owl-stage {
    display: -webkit-box !important;
    display: -moz-box !important;
    display: -ms-box !important;
    display: box !important;
}

@mixin for_breakpoint($breakpoints) {
    $conditions: ();

    @each $breakpoint in $breakpoints {
        // If the key exists in the map
        $conditions: append($conditions,
            #{inspect(map-get($media_queries, $breakpoint))},
            comma);
    }

    @media #{$conditions} {
        @content;
    }
}
